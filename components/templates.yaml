# █▀▀ █▀▀ █▄ █ █▀▀ █▀█ ▄▀█ █   #
# █▄█ ██▄ █ ▀█ ██▄ █▀▄ █▀█ █▄▄ #

  - select:
        # Switcher for Hue Entertainment Area
      - name: "Hue Entertainment Area"
        unique_id: hue_entertainment_area
        icon: mdi:sync-circle
        state: "{{ state_attr('media_player.play_sync_box', 'entertainment_area') }}"
        options: "{{ state_attr('media_player.play_sync_box', 'entertainment_area_list') }}"
        select_option:
          service: huesyncbox.set_entertainment_area
          target:
            entity_id: media_player.play_sync_box
          data:
            entertainment_area: "{{ option }}"

# █▀▀ ▄▀█ █   █▀▀ █ █ █   ▄▀█ ▀█▀ █▀▀ █▀▄ #
# █▄▄ █▀█ █▄▄ █▄▄ █▄█ █▄▄ █▀█  █  ██▄ █▄▀ #

  - sensor:
        # Actief Stroomtarief
      - name: Actief Stroomtarief
        unique_id: actief_stroomtarief
        icon: mdi:home-import-outline
        unit_of_measurement: EUR
        device_class: monetary
        state: "{{ iif(is_state('input_select.stroomtarieven', 'Normaaltarief'), '0.32284', '0.25677') }}"
        attributes:
          actief: "{{ states('input_select.stroomtarieven') }}"
          prijs_per_kWh_normaaltarief: "0.32284"
          prijs_per_kWh_daltarief: "0.25677"

        # Eneco MijnLaden Vergoedingstarief
      - name: MijnLaden Vergoedingstarief
        unique_id: mijnladen_vergoedingstarief
        icon: mdi:cash-refund
        unit_of_measurement: EUR
        device_class: monetary
        state: >
          {% set vergoeding = states('sensor.mijnladen_vergoeding_vandaag')|float(0) %}
          {% set verbruik = states('sensor.laadpaal_verbruik_vandaag')|float(0) %}

          {% if is_state('sensor.laadpaal_verbruik_vandaag', '0') %}
            0
          {% elif is_state('sensor.laadpaal_verbruik_vandaag', '0.00') %}
            0
          {% else %}
            {{ (vergoeding / verbruik) | round(5) }}
          {% endif %}
        attributes:
          verbruik_vandaag: "{{ states('sensor.laadpaal_verbruik_vandaag')|replace('.', ',') }} kWh"
          vergoeding_vandaag: "€ {{ states('sensor.mijnladen_vergoeding_vandaag')|replace('.', ',') }}"

        # Woonkamer + Keuken temperature
      - name: "Woonkamer CV Temperature Average"
        unique_id: avg_cv_klima_temperature
        device_class: temperature
        unit_of_measurement: "°C"
        availability: >-
          {% if is_state('sensor.keuken_klima15_temperature_sensor', 'unavailable') %}
            false
          {% elif is_state('sensor.woonkamer_klima10_l_temperature_sensor', 'unavailable') %}
            false
          {% elif is_state('sensor.woonkamer_klima10_r_temperature_sensor', 'unavailable') %}
            false
          {% else %}
            true
          {% endif %}
        state: >
          {% set keuken = states('sensor.keuken_klima15_temperature_sensor') | float(default=20) %}
          {% set woonkamer_l = states('sensor.woonkamer_klima10_l_temperature_sensor') | float(default=20) %}
          {% set woonkamer_r = states('sensor.woonkamer_klima10_r_temperature_sensor') | float(default=20) %}

          {{ ((keuken + woonkamer_l + woonkamer_r) / 3) | round(1) }}

        # Woonkamer + Keuken humidity
      - name: "Woonkamer CV Humidity Average"
        unique_id: avg_cv_klima_humidity
        device_class: humidity
        unit_of_measurement: "%"
        availability: >-
          {% if is_state('sensor.keuken_klima15_humidity_sensor', 'unavailable') %}
            false
          {% elif is_state('sensor.woonkamer_klima10_l_humidity_sensor', 'unavailable') %}
            false
          {% elif is_state('sensor.woonkamer_klima10_r_humidity_sensor', 'unavailable') %}
            false
          {% else %}
            true
          {% endif %}
        state: >
          {% set keuken = states('sensor.keuken_klima15_humidity_sensor') | float(default=60) %}
          {% set woonkamer_l = states('sensor.woonkamer_klima10_l_humidity_sensor') | float(default=60) %}
          {% set woonkamer_r = states('sensor.woonkamer_klima10_r_humidity_sensor') | float(default=60) %}

          {{ ((keuken + woonkamer_l + woonkamer_r) / 3) | round(1) }}

# █ █ █▀█ █▀▄▀█ █▀▀ █▄▀ █ ▀█▀ #
# █▀█ █▄█ █ ▀ █ ██▄ █ █ █  █  #

  - binary_sensor:
        # Camera motion sensor controlled by HomeKit
      - name: Woonkamer Cam Motion Sensor
        unique_id: cam_motion_sensor
        device_class: motion
        state: "{{ states('input_boolean.woonkamer_cam_sensor') }}"
        availability: "{{ states('switch.aqara_g2h') == 'on' }}"
        attributes:
          camera_network_access: "{{ states('switch.aqara_g2h') }}"

  - sensor:
      - name: 'IKEA Starkvind PM 2.5'
        unique_id: ikea_starkvind_pm_25
        device_class: pm25
        unit_of_measurement: µg/m³
        state: "{{ states('sensor.ikea_starkvind_air_quality') }}"
      - name: 'Smartmi P1 PM 2.5'
        unique_id: smartmi_p1_pm_25
        device_class: pm25
        unit_of_measurement: µg/m³
        state: "{{ states('sensor.tuya_smartmi_p1_air_quality') }}"

# █▄ █ █▀█ ▀█▀ █ █▀▀ █▄█ #
# █ ▀█ █▄█  █  █ █▀   █  #

  - binary_sensor:
        # Improved HACS Updater
      - name: HACS Updater
        unique_id: hacs_updater_v2
        device_class: update
        state: "{{ states('sensor.hacs') != '0' }}"
        attributes:
          repositories: "{{ state_attr('sensor.hacs', 'repositories') }}"
  - sensor: 
        # Software Updates Counter Badge
      - name: Software Update Badge
        unique_id: software_update_badge
        icon: mdi:numeric-{{ states('sensor.software_update_badge') }}-circle
        state: >-
          {% if states('group.software_updaters') == 'on' %}
            {%- for item in states.group.software_updaters.attributes.entity_id if (states(item) == 'on') %}
              {% if loop.last %}
                {{ loop.index + states('sensor.hacs')|int(0) }}
              {% endif %}
            {% endfor %}
          {% else %}
            {{ 0 + states('sensor.hacs')|int(0) }}
          {% endif %}

# █▀█ █▀▀ █   ▄▀█ ▀█▀ █ █ █ █▀▀   ▀█▀ █ █▀▄▀█ █▀▀ #
# █▀▄ ██▄ █▄▄ █▀█  █  █ ▀▄▀ ██▄    █  █ █ ▀ █ ██▄ #

  - sensor:
        # Time since last completed remote backup
      - name: Samba Relative Backup
        unique_id: samba_relative_backup
        icon: mdi:clipboard-text-clock
        state: "{{ relative_time( strptime(state_attr('sensor.samba_backup', 'last_backup'), '%Y-%m-%d %H:%M', now()) ) }} ago"
        
        # Dark or light outside
      - name: Ambient Light Outside
        unique_id: ambient_light_outside
        icon: "{{ iif(is_state('sensor.ambient_light_outside', 'Light'), 'mdi:brightness-5', 'mdi:brightness-1') }}"
        state: >-
          {% if is_state('input_select.home_state', 'Morning') or is_state('input_select.home_state', 'Day') %}
            Light
          {% elif is_state('input_select.home_state', 'Evening') or is_state('input_select.home_state', 'Night') %}
            Dark
          {% endif %}

# █▀█ █▀▀ █▀▀ █ █ █▀█ ▄▀█ █▄ █ █▀▀ █▄█ #
# █▄█ █▄▄ █▄▄ █▄█ █▀▀ █▀█ █ ▀█ █▄▄  █  #

  - binary_sensor:
        # Keuken Occupancy
      - name: Keuken Occupancy
        unique_id: keuken_occupancy
        device_class: occupancy
        state: >-
          {{ is_state('binary_sensor.keuken_motion_sensor', 'on')
             or is_state('input_boolean.keuken_control', 'on')
          }}
        icon: "{{ iif(is_state('binary_sensor.keuken_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          motion_sensor: "{{ states('binary_sensor.keuken_motion_sensor') }}"
          control_switch: "{{ states('input_boolean.keuken_control') }}"

        # Douche Occupancy
      - name: Douche Occupancy
        unique_id: douche_occupancy
        device_class: occupancy
        state: "{{ is_state('input_boolean.badkamer_douche_sensor', 'on') }}"
        icon: "{{ iif(is_state('binary_sensor.douche_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          input_boolean: "{{ states('input_boolean.badkamer_douche_sensor') }}"

        # Badkamer Occupancy
      - name: Badkamer Occupancy
        unique_id: badkamer_occupancy
        device_class: occupancy
        state: >-
          {{ is_state('binary_sensor.badkamer_motion_sensor', 'on')
             or is_state('input_boolean.badkamer_control', 'on')
             or is_state('input_boolean.badkamer_douche_sensor', 'on')
          }}
        icon: "{{ iif(is_state('binary_sensor.badkamer_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          motion_sensor: "{{ states('binary_sensor.badkamer_motion_sensor') }}"
          control_switch: "{{ states('input_boolean.badkamer_control') }}"
          douche_occupancy: "{{ states('input_boolean.badkamer_douche_sensor') }}"

        # Kledingkamer Occupancy
      - name: Kledingkamer Occupancy
        unique_id: kledingkamer_occupancy
        device_class: occupancy
        state: >-
          {{ is_state('binary_sensor.kledingkamer_motion_sensor', 'on')
             or is_state('input_boolean.kledingkamer_control', 'on')
          }}
        icon: "{{ iif(is_state('binary_sensor.kledingkamer_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          motion_sensor: "{{ states('binary_sensor.kledingkamer_motion_sensor') }}"
          control_switch: "{{ states('input_boolean.kledingkamer_control') }}"

        # Studiekamer Occupancy
      - name: Studiekamer Occupancy
        unique_id: studiekamer_occupancy
        device_class: occupancy
        state: >-
          {{ is_state('binary_sensor.studiekamer_motion_sensor', 'on')
             or is_state('input_boolean.studiekamer_control', 'on')
          }}
        icon: "{{ iif(is_state('binary_sensor.studiekamer_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          motion_sensor: "{{ states('binary_sensor.studiekamer_motion_sensor') }}"
          control_switch: "{{ states('input_boolean.studiekamer_control') }}"

        # Slaapkamer Occupancy
      - name: Slaapkamer Occupancy
        unique_id: slaapkamer_occupancy
        device_class: occupancy
        state: >-
          {{ is_state('binary_sensor.slaapkamer_motion_sensor', 'on')
             or is_state('input_boolean.slaapkamer_control', 'on')
          }}
        icon: "{{ iif(is_state('binary_sensor.slaapkamer_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          motion_sensor: "{{ states('binary_sensor.slaapkamer_motion_sensor') }}"
          control_switch: "{{ states('input_boolean.slaapkamer_control') }}"

        # Zolder Occupancy
      - name: Zolder Occupancy
        unique_id: zolder_occupancy
        device_class: occupancy
        state: >-
          {{ is_state('binary_sensor.oost_zolder_motion_sensor', 'on')
             or is_state('binary_sensor.west_zolder_motion_sensor', 'on')
             or is_state('input_boolean.zolder_control', 'on')
          }}
        icon: "{{ iif(is_state('binary_sensor.zolder_occupancy', 'on'), 'mdi:account-box-multiple', 'mdi:account-box') }}"
        attributes:
          oost_motion_sensor: "{{ states('binary_sensor.oost_zolder_motion_sensor') }}"
          west_motion_sensor: "{{ states('binary_sensor.west_zolder_motion_sensor') }}"
          control_switch: "{{ states('input_boolean.zolder_control') }}"